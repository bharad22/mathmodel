# -*- coding: utf-8 -*-
"""Prob5_MM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14PwDvGsiPv31ZBngXkyzGxaC6SWN5eCN

#Global functions and imports
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy import stats

"""#Problem 1

    Parallel Breakfast Food has data on the number of bosex of cereal it has sold in each of the boxes in the last 7 years

    Year   1989 1990 1991 1992 1993 1994 1995
    Boxes  21.0 19.4 22.6 28.2 30.4 24.0 25.0

    a) Find the linear estimating equation that best describes the data.
    b) Calculate the percent of trend for these data
    c) Calculate the relative cyclical residual for these data
    d) In what year does the biggest fluctuation from the trend occur under each measure of cyclical variation?
    Is the year the same for both measures? Explain.

"""

year = [1989, 1990, 1991, 1992, 1993, 1994, 1995]
boxes = [21.0, 19.4, 22.6, 28.2, 30.4, 24.0, 25.0]

plt.figure(figsize = (12, 8))
plt.plot(year, boxes, 'o', year, boxes, label = "Year vs boxes")
plt.legend(loc = 'upper left')
plt.show()

slope, intercept, r, p, std_err = stats.linregress(year, boxes)
y_cap = []
for i in range(0, len(boxes)):
  dummy = intercept + (slope * year[i])
  y_cap.append(dummy)

print("Boxes =", slope, "Year +",intercept)       
plt.figure(figsize = (12, 8))
plt.plot(year, y_cap, 'o', year, y_cap, label = "Predicted")
plt.plot(year, boxes, 'o', year, boxes, label = "original")
plt.legend()
plt.show()

percent = []
relative = []
for i in range(len(boxes)):
    percent.append((boxes[i]/y_cap[i])*100)
    relative.append(((boxes[i] - y_cap[i]) / y_cap[i])*100)

print("Percent cyclic variation: ", percent)
print("relative cyclic variation: ", relative)

t, p = stats.ttest_ind(boxes, y_cap)
print("T-test value: ", p)

index1 = percent.index(max(percent))
index2 = relative.index(max(relative))

print("Maximum percent of trend fluctuation is at the year: ", year[index1])
print("Maximum relative cyclic variation fluctuation is at the year: ", year[index2])

if index1 == index2:
  print("They are the same year")
else:
  print("They are in different years")

plt.figure(figsize=(12, 8))
plt.plot(year, percent, label = "Year vs Percent")
plt.plot(year, relative, label = "Year vs Relative")

plt.scatter(year[index1], max(percent))
plt.scatter(year[index2], max(relative))
                        
plt.legend()
plt.show()

"""#Problem 2

    The owner of the Pleasure-GLide Boat COmpany has compiled the following quarterly figures regarding 
    the company's level of accounts receivable over the last 5 years

    1991 1992 1993 1994 1995
    102  110  111  115  122   Spring
    120  126  128  135  144   Summer
    90   95   97   103  110   Fall
    78   83   86   91   98    Winter

    a) Calculate a 4-quarter centered moving average.
    b) Find the percentage of actual to moving average for each period
    c) Determine the modified seasonal indices and the seasonal indices

"""

data = [102, 120, 90, 78, 110, 126, 95, 83, 111, 128, 97, 86, 122, 144, 110, 98]
n = len(data)
k = 4
movingaverage1 = []
for i in range(n - k + 1):
  avg = 0
  for j in range(i, i + k):
    avg += data[j]
  avg = avg/k
  movingaverage1.append(avg)

for i in range(len(movingaverage1)):
  print(i+2.5, movingaverage1[i])

movingaverage2 = []
for i in range(len(movingaverage1)-1):
    s=0
    a=0
    for j in range(2):
        if(i+j < len(movingaverage1)):
         s += movingaverage1[i+j]
    movingaverage2.append(s/2)

for i in range(len(movingaverage2)):
  print(i+2, movingaverage2[i])

percent = [0, 0]

for i in range(len(movingaverage2)):
    if( i+2 < len(data)):
        dummy=(data[i+2]/movingaverage2[i])*100
        percent.append(dummy)
percent.append(0)    
percent.append(0) 

for i in range(len(percent)):
  print(i, percent[i])

quarters = [[], [], [], []]

for i in range(0, 16):
  if percent[i]:
    quarters[i%4].append(percent[i])

for i in range(4):
  print(i+1, "-->", quarters[i])

avg = []
for i in range(4):
  quarters[i].remove(max(quarters[i]))
  quarters[i].remove(min(quarters[i]))
  avg.append(sum(quarters[i])/len(quarters[i]))
  print("Q", i+1, avg[-1])

total_index = sum(avg)/4

print("Total Index: ", total_index)

deseason=[]
d = 400/total_index

for i in range(4):
  deseason.append(avg[i]*d)

print("Modified: ", deseason)

"""#Problem 3

    Marie Wiggs, personnel director for a pharmaceutical company, 
    recorded these percentage absentee rates for each quarter over a 4-year period

    1992 1993 1994 1995
    5.6  5.7  5.3  5.4   Spring
    6.8  6.7  6.6  6.9   Summer
    6.3  6.4  6.1  6.2   Fall
    5.2  5.4  5.1  5.3   Winter

    a) Construct a 4-quarter centered moving average and plot it on a graph along with the original data.

"""

x = [1992, 1993, 1994, 1995]
y = [5.6, 6.8, 6.3, 5.2, 5.7, 6.7, 6.4, 5.4, 5.3, 6.6, 6.1, 5.1, 5.4, 6.9, 6.2, 5.3]

movingaverage1 = []
for i in range(len(y)-3):
    s = 0
    for j in range(4):
        if(i+j < len(y)):
            s += y[i+j]
    movingaverage1.append(s/4)
print("Moving average 1")
for i in range(len(movingaverage1)):
  print(i+2.5, movingaverage1[i])

movingaverage2 = []
for i in range(len(movingaverage1)-1):
    s = 0
    for j in range(2):
        if(i+j < len(movingaverage1)):
         s += movingaverage1[i+j]
    
    movingaverage2.append(s/2)
print("\nMoving average 2")
for i in range(len(movingaverage2)):
  print(i+2, movingaverage2[i])

percent = [0,0]

for i in range(len(movingaverage2)):
    if( i+2<len(y)):
        dummy=(y[i+2]/movingaverage2[i])*100
        percent.append(dummy)
percent.append(0)    
percent.append(0) 

for i in range(len(percent)):
  print(i, percent[i])

quarters = [[], [], [], []]

for i in range(0, 16):
  if percent[i]:
    quarters[i%4].append(percent[i])

for i in range(4):
  print(i+1, "-->", quarters[i])

avg = []
for i in range(4):
  quarters[i].remove(max(quarters[i]))
  quarters[i].remove(min(quarters[i]))
  avg.append(sum(quarters[i])/len(quarters[i]))
  print("Q", i+1, avg[-1])

total_index = sum(avg)/4
print("Total Index: ", total_index)

deseason =[]
d = 400/total_index

for i in range(4):
  deseason.append(avg[i]*d)

print("Modified: ", deseason)

plt.figure(figsize = (12, 8))
n = [i for i in range(2, 14)]
plt.plot(y, label = "Original Data")
plt.plot(n, movingaverage2, label = "Moving average")
plt.legend()
plt.show()

"""#Problem 4

    A state commission designed to monitor energy consumption assembled the following seasonal data regarding natural gas consumption

    1992 1993 1994 1995
    293  301  304  306   Winter
    246  252  259  265   Spring
    231  227  239  240   Summer
    282  291  296  300   Fall

    a) Determine the seasonal indices and deseasonalize these data
    b) Calculate the least-squares line that best describes these data
    c) Identify the cyclical variationn in these data by the relative cyclical residual method
    d) Plot the original data, the deseasonalized data, and the trend
"""

x = [1992, 1993, 1994, 1995]
y = [293, 246, 231, 282, 301, 252, 227, 291, 304, 259, 239, 296, 306, 265, 240, 300]

movingaverge1 = []
for i in range(len(y)-3):
    s=0
    for j in range(4):
        if(i+j < len(y)):
            s += y[i+j]
    movingaverge1.append(s/4)

print("Moving average 1")
for i in range(len(movingaverage1)):
  print(i+2.5, movingaverage1[i])
    
movingaverage2 = []
for i in range(len(movingaverge1)-1):
    s=0
    a=0
    for j in range(2):
        if(i+j<len(movingaverge1)):
         s += movingaverge1[i+j]
    a=s/2
    movingaverage2.append(a)

print("\nMoving average 2")
for i in range(len(movingaverage2)):
  print(i+2, movingaverage2[i])

percent = [0,0]

for i in range(len(movingaverage2)):
    if( i+2 < len(y)):
        dummy=(y[i+2]/movingaverage2[i])*100
        percent.append(dummy)

percent.append(0)    
percent.append(0) 

for i in range(len(percent)):
  print(i, percent[i])

quarters = [[], [], [], []]

for i in range(0, 16):
  if percent[i]:
    quarters[i%4].append(percent[i])

for i in range(4):
  print(i+1, "-->", quarters[i])

avg = []
for i in range(4):
  quarters[i].remove(max(quarters[i]))
  quarters[i].remove(min(quarters[i]))
  avg.append(sum(quarters[i])/len(quarters[i]))
  print("Q", i+1, avg[-1])

total_index = sum(avg)/4
print("Total Index: ", total_index)

deseason = []
d = 400/total_index

for i in range(4):
  deseason.append(avg[i]*d)

print("Modified: ", deseason)

y_cap = []
deseason = deseason * 4

for i in range(len(y)):
    y_cap.append((y[i]/deseason[i])*100)
    
print("d: ", y_cap)    
x = [0] * (len(y))
mid = len(y)//2-1

x[mid] =- 0.5
x[mid+1] = 0.5

for i in range(mid-1, -1, -1):
    x[i] = x[i+1] - 1
    
for i in range(mid+2,len(x)):
    x[i]=x[i-1]+1

for i in range(len(x)):
    x[i] *= 2   
            
slope, intercept, r, p, std_err = stats.linregress(x, y_cap)

yp = []
for i in range(0,len(x)):
  yp.append(intercept + (slope * x[i]))

percent = []
relative = []
for i in range(len(y)):
    percent.append((y_cap[i]/yp[i])*100)
    relative.append(((y_cap[i]-yp[i])/yp[i])*100)

print("Percent cyclic variation: ", percent)
print("relative cyclic variation: ", relative)

plt.figure(figsize = (12, 8))
plt.plot(y, label = "Original")
plt.plot([i for i in range(2, 14)], movingaverage2, label = "Deseasonalized")
plt.plot(percent, label = "Percent cycle")
plt.legend()
plt.show()