# -*- coding: utf-8 -*-
"""Prob1_MM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IwsFhvoCeVqBCI63oU3wecXlhwSogq8l

#Global functions and imports
"""

import matplotlib.pyplot as plt
import numpy as np
import math
import stats

def difference(arr):
  forward_diff_table = []
  while len(arr)>1:
    temp=[]
    for i in range(1, len(arr)):
      temp.append(arr[i]-arr[i-1])
    forward_diff_table.append(temp)
    arr = temp

  return forward_diff_table

def ncr(n, r):
  val = 1
  for i in range(r):
    val *= (n - i)
  if r == 1:
    return val
  a = val / math.factorial(r)
  return a

def forward_interpolation(y, n, fdt, u):
  val = y
  for i in range(n):
    val += ncr(u, i+1) * fdt[i][0]
  return val

"""#Problem 1
    Analyze the dynamical system a_(n+1)= r^n a_0 with a_0=0 with 
          (i)r=0
          (ii)0<r<1
          (iii)-1<r<0
          (iv)|r|>1 
"""

def powerfunction1(x, r_val, m):
  arr = []
  for r in r_val:
    temp = []
    for i in range(m):
      temp.append(pow(r, i) * x)
    arr.append(temp)
  return arr

#1. i

x = 0
r = [0]
m = 20
arr = powerfunction1(x, r, m)

for i in arr:
  plt.plot(i)

#1. ii

x = 50
r = [0.1, 0.3, 0.5, 0.7, 0.9]
m = 20
arr = powerfunction1(x, r, m)
for i in arr:
  plt.plot(i)

#1. iii

x = 50
r = [-0.9, -0.7, -0.5, -0.3, -0.1]
m = 20
arr = powerfunction1(x, r, m)
for i in arr:
  plt.plot(i)

#1. iv

x = 50
r = [-10, -5, -2, 2, 5, 10]
m = 20
arr = powerfunction1(x, r, m)
for i in arr:
  plt.plot(i)

"""#Problem 2

    Construct a dynamical system for the following : Consider the decay of digoxin in the blood stream to 
    precribed dosage that keeps the concentration between the acceptable levels. Suppose we prescribe 
    a daily dosage of (i)  0.1 mg (ii) 0.2 mg (iii) 0.3 mg and know that half the digoxin remains in the system 
    at the end of each dosage period. Plot the graphs and discuss the stability.

"""

def recursivefunction2(x, n):
  arr = [x]
  for i in range(n):
    arr.append(0.5 * arr[-1] + x)
  return arr

#2. i

x = 0.1
n = 20
arr = recursivefunction2(x, n)
plt.plot(arr)
plt.show()

#2. ii

x = 0.2
n = 20
arr = recursivefunction2(x, n)
plt.plot(arr)
plt.show()

#2. iii

x = 0.3
n = 20
arr = recursivefunction2(x, n)
plt.plot(arr)
plt.show()

"""#Problem 3
    The data in the accompanying table show the speed n (in increments of 5mph) of an automobile and associated distance a_n
     in feet required to stop it once the breaks are applied. For instance n =6 requires a stopping distance of a_n = 47ft.
     (a) Calculate and plot the changes âˆ†a_n verses n. Does the graph reasonably approximate linear 
          relationship?
     (b) Based on your conclusion in part(a) find the difference equation model for the stopping date . Test 
          your model by plotting the errors in the predicted values against n, Discuss the appropriateness of 
         the  model. 

      n	  1	2	3	 4	 5	 6	 7	 8	 9	  10	 11	 12	 13	 14	 15	 16
      a_n	3	6	11	21	32	47	65	87	112	110	171	204	241	282	325	376

"""

#3. i
import numpy as np
import matplotlib.pyplot as plt

n = [i for i in range(1, 17)]
a_n = np.array([3,	6,	11,	21,	32,	47,	65,	87,	112,	110,	171,	204,	241,	282,	325,	376])
del_a_n = difference(a_n)

fig = plt.figure(figsize = (12, 8))

for index, arr in enumerate(del_a_n):
  plt.plot(arr, label = str(index))
plt.legend()
plt.show()

h = 1

error = []
for i in range(len(a_n)):
  u = (n[i]-n[0])/h
  y_cap = forward_interpolation(a_n[0], len(del_a_n), del_a_n, u)
  error.append(y_cap - a_n[i])

fig = plt.figure(figsize = (12, 8))

plt.plot(n, error)
plt.show()

"""#Problem 4

    The following table gives the stretch against force
    Force   10 20 30 40  50  60  70  80  90
    Stretch 19 57 94 134 173 216 256 297 343
    (a) obtain the interpolating polynomial using Newton forward interpolation formula, plot the graph and 
    obtain the value of the stretch against the force 15,17, 85
    (b) Calculate and plot the error obtained.
    (c) Does the interpolating polynomial fit the data ? (analyze using t-test)
"""

force = np.array([i*10 for i in range(1, 10)])
stretch = np.array([19, 57, 94, 134, 173, 216, 256, 297, 343])

fig = plt.figure(figsize = (12, 8))
diff = difference(stretch)
for i in range(1, len(diff)):
  plt.plot(diff[i], label = str(i))
plt.legend()
plt.show()

h=10

error = []
y_cap = []
for i in range(len(force)):
  u = (force[i]-force[0])/h
  y_cap.append(forward_interpolation(stretch[0], len(diff), diff, u))
  error.append(y_cap[-1] - stretch[i])

fig = plt.figure(figsize = (12, 8))
plt.plot(force, error, label = "force vs error")
plt.plot(force, y_cap, label = "force vs interpolation")
plt.legend()
plt.show()

h=10

y_cap = []
force_x = [15, 17, 85]
for i in range(len(force_x)):
  u = (force_x[i] - force[0])/h
  y_cap.append(forward_interpolation(stretch[0], len(diff), diff, u))

plt.scatter(force_x, y_cap)
plt.show()